// <auto-generated />
using System;
using Microservices.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Microservices.Data.Migrations
{
    [DbContext(typeof(DataContext))]
    partial class DataContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.1-rtm-30846")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microservices.Entities.Email", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("EnderecoEmail")
                        .HasMaxLength(100);

                    b.Property<int>("PessoaId");

                    b.Property<bool>("Principal");

                    b.HasKey("Id");

                    b.HasIndex("PessoaId");

                    b.ToTable("Emails");

                    b.HasData(
                        new { Id = 1, EnderecoEmail = "teste1@teste.com", PessoaId = 1, Principal = true },
                        new { Id = 2, EnderecoEmail = "teste2@teste.com", PessoaId = 1, Principal = false }
                    );
                });

            modelBuilder.Entity("Microservices.Entities.Pedido", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("ClienteId");

                    b.Property<DateTime>("Data");

                    b.Property<DateTime?>("DataHoraAlteracao");

                    b.Property<DateTime>("DataHoraCadastro");

                    b.Property<Guid?>("UsuarioAlteracaoId");

                    b.Property<Guid>("UsuarioCadastroId");

                    b.Property<decimal>("ValorTotal")
                        .HasColumnType("decimal(14,4)");

                    b.Property<string>("Vendedor");

                    b.HasKey("Id");

                    b.HasIndex("ClienteId");

                    b.HasIndex("UsuarioAlteracaoId");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("Pedidos");
                });

            modelBuilder.Entity("Microservices.Entities.PedidoItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<decimal?>("Desconto")
                        .HasColumnType("decimal(4,3)");

                    b.Property<Guid>("PedidoId");

                    b.Property<decimal>("PrecoUnitario")
                        .HasColumnType("decimal(14,4)");

                    b.Property<int>("ProdutoId");

                    b.Property<int>("Quantidade");

                    b.HasKey("Id");

                    b.HasIndex("PedidoId");

                    b.HasIndex("ProdutoId");

                    b.ToTable("PedidoItens");
                });

            modelBuilder.Entity("Microservices.Entities.Pessoa", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("Apelido");

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<bool>("Inativo");

                    b.HasKey("Id");

                    b.ToTable("Pessoas");

                    b.HasDiscriminator<string>("Discriminator").HasValue("Pessoa");
                });

            modelBuilder.Entity("Microservices.Entities.Produto", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<DateTime>("DataHoraCadastro");

                    b.Property<bool>("Inativo");

                    b.Property<string>("Nome")
                        .IsRequired()
                        .HasMaxLength(100);

                    b.Property<decimal>("Preco")
                        .HasColumnType("decimal(14,4)");

                    b.Property<Guid>("UsuarioCadastroId");

                    b.HasKey("Id");

                    b.HasIndex("UsuarioCadastroId");

                    b.ToTable("Produtos");

                    b.HasData(
                        new { Id = 1, DataHoraCadastro = new DateTime(1, 1, 1, 0, 0, 0, 0, DateTimeKind.Unspecified), Inativo = false, Nome = "Mesa", Preco = 200m, UsuarioCadastroId = new Guid("09c04ed3-607f-4c37-9714-30053ff97d77") }
                    );
                });

            modelBuilder.Entity("Microservices.Entities.Usuario", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<bool>("Inativo");

                    b.Property<string>("Nome");

                    b.HasKey("Id");

                    b.ToTable("Usuario");

                    b.HasData(
                        new { Id = new Guid("09c04ed3-607f-4c37-9714-30053ff97d77"), Inativo = false, Nome = "Admin" }
                    );
                });

            modelBuilder.Entity("Microservices.Entities.PessoaJuridica", b =>
                {
                    b.HasBaseType("Microservices.Entities.Pessoa");

                    b.Property<string>("CNPJ")
                        .IsRequired();

                    b.Property<string>("RazaoSocial")
                        .IsRequired();

                    b.ToTable("PessoasJuridicas");

                    b.HasDiscriminator().HasValue("PessoaJuridica");
                });

            modelBuilder.Entity("Microservices.Entities.Cliente", b =>
                {
                    b.HasBaseType("Microservices.Entities.PessoaJuridica");

                    b.Property<DateTime>("PrimeiraCompra");

                    b.ToTable("Clientes");

                    b.HasDiscriminator().HasValue("Cliente");

                    b.HasData(
                        new { Id = 1, Apelido = "Microservices", Inativo = false, CNPJ = "191000000000", RazaoSocial = "Microservices SA", PrimeiraCompra = new DateTime(2018, 6, 28, 20, 44, 45, 577, DateTimeKind.Local) }
                    );
                });

            modelBuilder.Entity("Microservices.Entities.Email", b =>
                {
                    b.HasOne("Microservices.Entities.Pessoa", "Pessoa")
                        .WithMany("Emails")
                        .HasForeignKey("PessoaId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microservices.Entities.Pedido", b =>
                {
                    b.HasOne("Microservices.Entities.Cliente", "Cliente")
                        .WithMany()
                        .HasForeignKey("ClienteId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microservices.Entities.Usuario", "UsuarioAlteracao")
                        .WithMany()
                        .HasForeignKey("UsuarioAlteracaoId");

                    b.HasOne("Microservices.Entities.Usuario", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microservices.Entities.PedidoItem", b =>
                {
                    b.HasOne("Microservices.Entities.Pedido", "Pedido")
                        .WithMany("PedidoItens")
                        .HasForeignKey("PedidoId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microservices.Entities.Produto", "Produto")
                        .WithMany()
                        .HasForeignKey("ProdutoId")
                        .OnDelete(DeleteBehavior.Restrict);
                });

            modelBuilder.Entity("Microservices.Entities.Produto", b =>
                {
                    b.HasOne("Microservices.Entities.Usuario", "UsuarioCadastro")
                        .WithMany()
                        .HasForeignKey("UsuarioCadastroId")
                        .OnDelete(DeleteBehavior.Cascade);
                });
#pragma warning restore 612, 618
        }
    }
}
